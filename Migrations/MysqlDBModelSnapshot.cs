// <auto-generated />
using System;
using BotWithAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BotWithAPI.Migrations
{
    [DbContext(typeof(MysqlDB))]
    partial class MysqlDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BotWithAPI.Data.Model.BotSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastDdCheck");

                    b.HasKey("Id");

                    b.ToTable("BotSettings");
                });

            modelBuilder.Entity("BotWithAPI.Data.Model.ChatParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Chat");

                    b.Property<string>("Description");

                    b.Property<bool>("IsValid");

                    b.Property<DateTime?>("LastUpDateTime");

                    b.Property<string>("Rules");

                    b.Property<int?>("SettingsId");

                    b.Property<string>("Title");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.ToTable("ChatParams");
                });

            modelBuilder.Entity("BotWithAPI.Data.Model.ChatSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BayanAnimation");

                    b.Property<bool>("ReputationEnabled");

                    b.Property<bool>("StickerFloodControl");

                    b.Property<int>("StickerFloodDelay");

                    b.Property<bool>("StickerFloodIgnoreAdmins");

                    b.HasKey("Id");

                    b.ToTable("ChatSettings");
                });

            modelBuilder.Entity("BotWithAPI.Data.Model.UserParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Chat");

                    b.Property<int?>("ChatParamsId");

                    b.Property<int>("Reputation");

                    b.Property<long>("User");

                    b.Property<short>("Warns");

                    b.HasKey("Id");

                    b.HasIndex("ChatParamsId");

                    b.HasIndex("User", "Chat");

                    b.ToTable("UserParams");
                });

            modelBuilder.Entity("BotWithAPI.Data.Model.ChatParams", b =>
                {
                    b.HasOne("BotWithAPI.Data.Model.ChatSettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");
                });

            modelBuilder.Entity("BotWithAPI.Data.Model.UserParams", b =>
                {
                    b.HasOne("BotWithAPI.Data.Model.ChatParams")
                        .WithMany("Administrators")
                        .HasForeignKey("ChatParamsId");
                });
#pragma warning restore 612, 618
        }
    }
}
